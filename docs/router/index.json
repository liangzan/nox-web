[
  {
    "tags": [],
    "description": {
      "full": "<p>Module dependencies.</p>",
      "summary": "<p>Module dependencies.</p>",
      "body": ""
    },
    "ignore": false,
    "code": "var Route = require('./route')\n  , utils = require('../utils')\n  , debug = require('debug')('express:router')\n  , parse = require('connect').utils.parseUrl\n  , methods = require('methods');",
    "ctx": {
      "type": "declaration",
      "name": "Route",
      "value": "require('./route')",
      "string": "Route"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Expose <code>Router</code> constructor.</p>",
      "summary": "<p>Expose <code>Router</code> constructor.</p>",
      "body": ""
    },
    "ignore": false,
    "code": "exports = module.exports = Router;"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "options",
        "description": ""
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Initialize a new <code>Router</code> with the given <code>options</code>.</p>",
      "summary": "<p>Initialize a new <code>Router</code> with the given <code>options</code>.</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "function Router(options) {\n  options = options || {};\n  var self = this;\n  this.map = {};\n  this.params = {};\n  this._params = [];\n  this.caseSensitive = options.caseSensitive;\n  this.strict = options.strict;\n  this.middleware = function router(req, res, next){\n    self._dispatch(req, res, next);\n  };\n}",
    "ctx": {
      "type": "function",
      "name": "Router",
      "string": "Router()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Function"
        ],
        "name": "name",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Function"
        ],
        "name": "fn",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Router"
        ],
        "description": "for chaining"
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Register a param callback <code>fn</code> for the given <code>name</code>.</p>",
      "summary": "<p>Register a param callback <code>fn</code> for the given <code>name</code>.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "Router.prototype.param = function(name, fn){\n  // param logic\n  if ('function' == typeof name) {\n    this._params.push(name);\n    return;\n  }\n\n  // apply param functions\n  var params = this._params\n    , len = params.length\n    , ret;\n\n  for (var i = 0; i < len; ++i) {\n    if (ret = params[i](name, fn)) {\n      fn = ret;\n    }\n  }\n\n  // ensure we end up with a\n  // middleware function\n  if ('function' != typeof fn) {\n    throw new Error('invalid param() call for ' + name + ', got ' + fn);\n  }\n\n  (this.params[name] = this.params[name] || []).push(fn);\n  return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Router",
      "name": "param",
      "string": "Router.prototype.param()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "IncomingMessage"
        ],
        "name": "req",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "ServerResponse"
        ],
        "name": "res",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Function"
        ],
        "name": "next",
        "description": ""
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Route dispatcher aka the route \"middleware\".</p>",
      "summary": "<p>Route dispatcher aka the route \"middleware\".</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "Router.prototype._dispatch = function(req, res, next){\n  var params = this.params\n    , self = this;\n\n  debug('dispatching %s %s (%s)', req.method, req.url, req.originalUrl);\n\n  // route dispatch\n  (function pass(i, err){\n    var paramCallbacks\n      , paramIndex = 0\n      , paramVal\n      , route\n      , keys\n      , key\n      , ret;\n\n    // match next route\n    function nextRoute(err) {\n      pass(req._route_index + 1, err);\n    }\n\n    // match route\n    req.route = route = self.matchRequest(req, i);\n\n    // implied OPTIONS\n    if (!route && 'OPTIONS' == req.method) return self._options(req, res);\n\n    // no route\n    if (!route) return next(err);\n    debug('matched %s %s', route.method, route.path);\n\n    // we have a route\n    // start at param 0\n    req.params = route.params;\n    keys = route.keys;\n    i = 0;\n\n    // param callbacks\n    function param(err) {\n      paramIndex = 0;\n      key = keys[i++];\n      paramVal = key && req.params[key.name];\n      paramCallbacks = key && params[key.name];\n\n      try {\n        if ('route' == err) {\n          nextRoute();\n        } else if (err) {\n          i = 0;\n          callbacks(err);\n        } else if (paramCallbacks && undefined !== paramVal) {\n          paramCallback();\n        } else if (key) {\n          param();\n        } else {\n          i = 0;\n          callbacks();\n        }\n      } catch (err) {\n        param(err);\n      }\n    };\n\n    param(err);\n    \n    // single param callbacks\n    function paramCallback(err) {\n      var fn = paramCallbacks[paramIndex++];\n      if (err || !fn) return param(err);\n      fn(req, res, paramCallback, paramVal, key.name);\n    }\n\n    // invoke route callbacks\n    function callbacks(err) {\n      var fn = route.callbacks[i++];\n      try {\n        if ('route' == err) {\n          nextRoute();\n        } else if (err && fn) {\n          if (fn.length < 4) return callbacks(err);\n          fn(err, req, res, callbacks);\n        } else if (fn) {\n          fn(req, res, callbacks);\n        } else {\n          nextRoute(err);\n        }\n      } catch (err) {\n        callbacks(err);\n      }\n    }\n  })(0);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Router",
      "name": "_dispatch",
      "string": "Router.prototype._dispatch()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "IncomingMessage"
        ],
        "name": "req",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "ServerResponse"
        ],
        "name": "res",
        "description": ""
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Respond to <strong>OPTIONS</strong> method.</p>",
      "summary": "<p>Respond to <strong>OPTIONS</strong> method.</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "Router.prototype._options = function(req, res){\n  var path = parse(req).pathname\n    , body = this._optionsFor(path).join(',');\n  res.set('Allow', body).send(body);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Router",
      "name": "_options",
      "string": "Router.prototype._options()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "path",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Array"
        ],
        "description": ""
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Return an array of HTTP verbs or \"options\" for <code>path</code>.</p>",
      "summary": "<p>Return an array of HTTP verbs or \"options\" for <code>path</code>.</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "Router.prototype._optionsFor = function(path){\n  var self = this;\n  return methods.filter(function(method){\n    var routes = self.map[method];\n    if (!routes || 'options' == method) return;\n    for (var i = 0, len = routes.length; i < len; ++i) {\n      if (routes[i].match(path)) return true;\n    }\n  }).map(function(method){\n    return method.toUpperCase();\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Router",
      "name": "_optionsFor",
      "string": "Router.prototype._optionsFor()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "IncomingMessage"
        ],
        "name": "req",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Number"
        ],
        "name": "i",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Route"
        ],
        "description": ""
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Attempt to match a route for <code>req</code><br />with optional starting index of <code>i</code><br />defaulting to 0.</p>",
      "summary": "<p>Attempt to match a route for <code>req</code><br />with optional starting index of <code>i</code><br />defaulting to 0.</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "Router.prototype.matchRequest = function(req, i, head){\n  var method = req.method.toLowerCase()\n    , url = parse(req)\n    , path = url.pathname\n    , routes = this.map\n    , i = i || 0\n    , route;\n\n  // HEAD support\n  if (!head && 'head' == method) {\n    route = this.matchRequest(req, i, true);\n    if (route) return route;\n     method = 'get';\n  }\n\n  // routes for this method\n  if (routes = routes[method]) {\n\n    // matching routes\n    for (var len = routes.length; i < len; ++i) {\n      route = routes[i];\n      if (route.match(path)) {\n        req._route_index = i;\n        return route;\n      }\n    }\n  }\n};",
    "ctx": {
      "type": "method",
      "constructor": "Router",
      "name": "matchRequest",
      "string": "Router.prototype.matchRequest()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "method",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "url",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Number"
        ],
        "name": "i",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Route"
        ],
        "description": ""
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Attempt to match a route for <code>method</code><br />and <code>url</code> with optional starting<br />index of <code>i</code> defaulting to 0.</p>",
      "summary": "<p>Attempt to match a route for <code>method</code><br />and <code>url</code> with optional starting<br />index of <code>i</code> defaulting to 0.</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "Router.prototype.match = function(method, url, i, head){\n  var req = { method: method, url: url };\n  return  this.matchRequest(req, i, head);\n};",
    "ctx": {
      "type": "method",
      "constructor": "Router",
      "name": "match",
      "string": "Router.prototype.match()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "method",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "path",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Function"
        ],
        "name": "callback...",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Router"
        ],
        "description": "for chaining"
      },
      {
        "type": "api",
        "visibility": "private"
      }
    ],
    "description": {
      "full": "<p>Route <code>method</code>, <code>path</code>, and one or more callbacks.</p>",
      "summary": "<p>Route <code>method</code>, <code>path</code>, and one or more callbacks.</p>",
      "body": ""
    },
    "isPrivate": true,
    "ignore": false,
    "code": "Router.prototype.route = function(method, path, callbacks){\n  var method = method.toLowerCase()\n    , callbacks = utils.flatten([].slice.call(arguments, 2));\n\n  // ensure path was given\n  if (!path) throw new Error('Router#' + method + '() requires a path');\n\n  // create the route\n  debug('defined %s %s', method, path);\n  var route = new Route(method, path, callbacks, {\n      sensitive: this.caseSensitive\n    , strict: this.strict\n  });\n\n  // add it\n  (this.map[method] = this.map[method] || []).push(route);\n  return this;\n};",
    "ctx": {
      "type": "method",
      "constructor": "Router",
      "name": "route",
      "string": "Router.prototype.route()"
    }
  }
]