[
  {
    "tags": [],
    "description": {
      "full": "<p>Module dependencies.</p>",
      "summary": "<p>Module dependencies.</p>",
      "body": ""
    },
    "ignore": false,
    "code": "var http = require('http')\n  , utils = require('./utils')\n  , connect = require('connect')\n  , fresh = require('fresh')\n  , parseRange = require('range-parser')\n  , parse = connect.utils.parseUrl\n  , mime = connect.mime;",
    "ctx": {
      "type": "declaration",
      "name": "http",
      "value": "require('http')",
      "string": "http"
    }
  },
  {
    "tags": [],
    "description": {
      "full": "<p>Request prototype.</p>",
      "summary": "<p>Request prototype.</p>",
      "body": ""
    },
    "ignore": false,
    "code": "var req = exports = module.exports = {\n  __proto__: http.IncomingMessage.prototype\n};",
    "ctx": {
      "type": "declaration",
      "name": "req",
      "value": "exports = module.exports = {",
      "string": "req"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "name",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "String"
        ],
        "description": ""
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Return request header.</p>\n\n<p>The <code>Referrer</code> header field is special-cased,<br />both <code>Referrer</code> and <code>Referer</code> are interchangeable.</p>\n\n<h2>Examples</h2>\n\n<pre><code>req.get('Content-Type');\n// =&gt; \"text/plain\"\n\nreq.get('content-type');\n// =&gt; \"text/plain\"\n\nreq.get('Something');\n// =&gt; undefined\n</code></pre>\n\n<p>Aliased as <code>req.header()</code>.</p>",
      "summary": "<p>Return request header.</p>",
      "body": "<p>The <code>Referrer</code> header field is special-cased,<br />both <code>Referrer</code> and <code>Referer</code> are interchangeable.</p>\n\n<h2>Examples</h2>\n\n<pre><code>req.get('Content-Type');\n// =&gt; \"text/plain\"\n\nreq.get('content-type');\n// =&gt; \"text/plain\"\n\nreq.get('Something');\n// =&gt; undefined\n</code></pre>\n\n<p>Aliased as <code>req.header()</code>.</p>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "req.get = \nreq.header = function(name){\n  switch (name = name.toLowerCase()) {\n    case 'referer':\n    case 'referrer':\n      return this.headers.referrer\n        || this.headers.referer;\n    default:\n      return this.headers[name];\n  }\n};",
    "ctx": {
      "type": "property",
      "receiver": "req",
      "name": "get",
      "value": " ",
      "string": "req.get"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Array"
        ],
        "name": "type(s)",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "String"
        ],
        "description": ""
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Check if the given <code>type(s)</code> is acceptable, returning<br />the best match when true, otherwise <code>undefined</code>, in which<br />case you should respond with 406 \"Not Acceptable\".</p>\n\n<p>The <code>type</code> value may be a single mime type string<br />such as \"application/json\", the extension name<br />such as \"json\", a comma-delimted list such as \"json, html, text/plain\",<br />or an array <code>[\"json\", \"html\", \"text/plain\"]</code>. When a list<br />or array is given the <em>best</em> match, if any is returned.</p>\n\n<h2>Examples</h2>\n\n<pre><code>// Accept: text/html\nreq.accepts('html');\n// =&gt; \"html\"\n\n// Accept: text/*, application/json\nreq.accepts('html');\n// =&gt; \"html\"\nreq.accepts('text/html');\n// =&gt; \"text/html\"\nreq.accepts('json, text');\n// =&gt; \"json\"\nreq.accepts('application/json');\n// =&gt; \"application/json\"\n\n// Accept: text/*, application/json\nreq.accepts('image/png');\nreq.accepts('png');\n// =&gt; undefined\n\n// Accept: text/*;q=.5, application/json\nreq.accepts(['html', 'json']);\nreq.accepts('html, json');\n// =&gt; \"json\"\n</code></pre>",
      "summary": "<p>Check if the given <code>type(s)</code> is acceptable, returning<br />the best match when true, otherwise <code>undefined</code>, in which<br />case you should respond with 406 \"Not Acceptable\".</p>",
      "body": "<p>The <code>type</code> value may be a single mime type string<br />such as \"application/json\", the extension name<br />such as \"json\", a comma-delimted list such as \"json, html, text/plain\",<br />or an array <code>[\"json\", \"html\", \"text/plain\"]</code>. When a list<br />or array is given the <em>best</em> match, if any is returned.</p>\n\n<h2>Examples</h2>\n\n<pre><code>// Accept: text/html\nreq.accepts('html');\n// =&gt; \"html\"\n\n// Accept: text/*, application/json\nreq.accepts('html');\n// =&gt; \"html\"\nreq.accepts('text/html');\n// =&gt; \"text/html\"\nreq.accepts('json, text');\n// =&gt; \"json\"\nreq.accepts('application/json');\n// =&gt; \"application/json\"\n\n// Accept: text/*, application/json\nreq.accepts('image/png');\nreq.accepts('png');\n// =&gt; undefined\n\n// Accept: text/*;q=.5, application/json\nreq.accepts(['html', 'json']);\nreq.accepts('html, json');\n// =&gt; \"json\"\n</code></pre>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "req.accepts = function(type){\n  return utils.accepts(type, this.get('Accept'));\n};",
    "ctx": {
      "type": "method",
      "receiver": "req",
      "name": "accepts",
      "string": "req.accepts()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "charset",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Boolean"
        ],
        "description": ""
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Check if the given <code>charset</code> is acceptable,<br />otherwise you should respond with 406 \"Not Acceptable\".</p>",
      "summary": "<p>Check if the given <code>charset</code> is acceptable,<br />otherwise you should respond with 406 \"Not Acceptable\".</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "req.acceptsCharset = function(charset){\n  var accepted = this.acceptedCharsets;\n  return accepted.length\n    ? ~accepted.indexOf(charset)\n    : true;\n};",
    "ctx": {
      "type": "method",
      "receiver": "req",
      "name": "acceptsCharset",
      "string": "req.acceptsCharset()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "lang",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Boolean"
        ],
        "description": ""
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Check if the given <code>lang</code> is acceptable,<br />otherwise you should respond with 406 \"Not Acceptable\".</p>",
      "summary": "<p>Check if the given <code>lang</code> is acceptable,<br />otherwise you should respond with 406 \"Not Acceptable\".</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "req.acceptsLanguage = function(lang){\n  var accepted = this.acceptedLanguages;\n  return accepted.length\n    ? ~accepted.indexOf(lang)\n    : true;\n};",
    "ctx": {
      "type": "method",
      "receiver": "req",
      "name": "acceptsLanguage",
      "string": "req.acceptsLanguage()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Number"
        ],
        "name": "size",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Array"
        ],
        "description": ""
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Parse Range header field,<br />capping to the given <code>size</code>.</p>\n\n<p>Unspecified ranges such as \"0-\" require<br />knowledge of your resource length. In<br />the case of a byte range this is of course<br />the total number of bytes. If the Range<br />header field is not given <code>null</code> is returned,<br /><code>-1</code> when unsatisfiable, <code>-2</code> when syntactically invalid.</p>\n\n<p>NOTE: remember that ranges are inclusive, so<br />for example \"Range: users=0-3\" should respond<br />with 4 users when available, not 3.</p>",
      "summary": "<p>Parse Range header field,<br />capping to the given <code>size</code>.</p>",
      "body": "<p>Unspecified ranges such as \"0-\" require<br />knowledge of your resource length. In<br />the case of a byte range this is of course<br />the total number of bytes. If the Range<br />header field is not given <code>null</code> is returned,<br /><code>-1</code> when unsatisfiable, <code>-2</code> when syntactically invalid.</p>\n\n<p>NOTE: remember that ranges are inclusive, so<br />for example \"Range: users=0-3\" should respond<br />with 4 users when available, not 3.</p>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "req.range = function(size){\n  var range = this.get('Range');\n  if (!range) return;\n  return parseRange(size, range);\n};",
    "ctx": {
      "type": "method",
      "receiver": "req",
      "name": "range",
      "string": "req.range()"
    }
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "Array"
        ],
        "description": ""
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Return an array of Accepted media types<br />ordered from highest quality to lowest.</p>\n\n<h2>Examples</h2>\n\n<pre><code>[ { value: 'application/json',\n    quality: 1,\n    type: 'application',\n    subtype: 'json' },\n  { value: 'text/html',\n    quality: 0.5,\n    type: 'text',\n    subtype: 'html' } ]\n</code></pre>",
      "summary": "<p>Return an array of Accepted media types<br />ordered from highest quality to lowest.</p>",
      "body": "<h2>Examples</h2>\n\n<pre><code>[ { value: 'application/json',\n    quality: 1,\n    type: 'application',\n    subtype: 'json' },\n  { value: 'text/html',\n    quality: 0.5,\n    type: 'text',\n    subtype: 'html' } ]\n</code></pre>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "req.__defineGetter__('accepted', function(){\n  var accept = this.get('Accept');\n  return accept\n    ? utils.parseAccept(accept)\n    : [];\n});"
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "Array"
        ],
        "description": ""
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Return an array of Accepted languages<br />ordered from highest quality to lowest.</p>\n\n<h2>Examples</h2>\n\n<pre><code>Accept-Language: en;q=.5, en-us\n['en-us', 'en']\n</code></pre>",
      "summary": "<p>Return an array of Accepted languages<br />ordered from highest quality to lowest.</p>",
      "body": "<h2>Examples</h2>\n\n<pre><code>Accept-Language: en;q=.5, en-us\n['en-us', 'en']\n</code></pre>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "req.__defineGetter__('acceptedLanguages', function(){\n  var accept = this.get('Accept-Language');\n  return accept\n    ? utils\n      .parseQuality(accept)\n      .map(function(obj){\n        return obj.value;\n      })\n    : [];\n});"
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "Array"
        ],
        "description": ""
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Return an array of Accepted charsets<br />ordered from highest quality to lowest.</p>\n\n<h2>Examples</h2>\n\n<pre><code>Accept-Charset: iso-8859-5;q=.2, unicode-1-1;q=0.8\n['unicode-1-1', 'iso-8859-5']\n</code></pre>",
      "summary": "<p>Return an array of Accepted charsets<br />ordered from highest quality to lowest.</p>",
      "body": "<h2>Examples</h2>\n\n<pre><code>Accept-Charset: iso-8859-5;q=.2, unicode-1-1;q=0.8\n['unicode-1-1', 'iso-8859-5']\n</code></pre>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "req.__defineGetter__('acceptedCharsets', function(){\n  var accept = this.get('Accept-Charset');\n  return accept\n    ? utils\n      .parseQuality(accept)\n      .map(function(obj){\n        return obj.value;\n      })\n    : [];\n});"
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "name",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "Mixed"
        ],
        "name": "defaultValue",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "String"
        ],
        "description": ""
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Return the value of param <code>name</code> when present or <code>defaultValue</code>.</p>\n\n<ul>\n<li>Checks route placeholders, ex: <em>/user/:id</em></li>\n<li>Checks body params, ex: id=12, {\"id\":12}</li>\n<li>Checks query string params, ex: ?id=12</li>\n</ul>\n\n<p>To utilize request bodies, <code>req.body</code><br />should be an object. This can be done by using<br />the <code>connect.bodyParser()</code> middleware.</p>",
      "summary": "<p>Return the value of param <code>name</code> when present or <code>defaultValue</code>.</p>",
      "body": "<ul>\n<li>Checks route placeholders, ex: <em>/user/:id</em></li>\n<li>Checks body params, ex: id=12, {\"id\":12}</li>\n<li>Checks query string params, ex: ?id=12</li>\n</ul>\n\n<p>To utilize request bodies, <code>req.body</code><br />should be an object. This can be done by using<br />the <code>connect.bodyParser()</code> middleware.</p>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "req.param = function(name, defaultValue){\n  var params = this.params || {};\n  var body = this.body || {};\n  var query = this.query || {};\n  if (null != params[name] && params.hasOwnProperty(name)) return params[name];\n  if (null != body[name]) return body[name];\n  if (null != query[name]) return query[name];\n  return defaultValue;\n};",
    "ctx": {
      "type": "method",
      "receiver": "req",
      "name": "param",
      "string": "req.param()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "type",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "Boolean"
        ],
        "description": ""
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Check if the incoming request contains the \"Content-Type\" <br />header field, and it contains the give mime <code>type</code>.</p>\n\n<h2>Examples</h2>\n\n<pre><code> // With Content-Type: text/html; charset=utf-8\n req.is('html');\n req.is('text/html');\n req.is('text/*');\n // =&gt; true\n\n // When Content-Type is application/json\n req.is('json');\n req.is('application/json');\n req.is('application/*');\n // =&gt; true\n\n req.is('html');\n // =&gt; false\n</code></pre>",
      "summary": "<p>Check if the incoming request contains the \"Content-Type\" <br />header field, and it contains the give mime <code>type</code>.</p>",
      "body": "<h2>Examples</h2>\n\n<pre><code> // With Content-Type: text/html; charset=utf-8\n req.is('html');\n req.is('text/html');\n req.is('text/*');\n // =&gt; true\n\n // When Content-Type is application/json\n req.is('json');\n req.is('application/json');\n req.is('application/*');\n // =&gt; true\n\n req.is('html');\n // =&gt; false\n</code></pre>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "req.is = function(type){\n  var ct = this.get('Content-Type');\n  if (!ct) return false;\n  ct = ct.split(';')[0];\n  if (!~type.indexOf('/')) type = mime.lookup(type);\n  if (~type.indexOf('*')) {\n    type = type.split('/');\n    ct = ct.split('/');\n    if ('*' == type[0] && type[1] == ct[1]) return true;\n    if ('*' == type[1] && type[0] == ct[0]) return true;\n    return false;\n  }\n  return !! ~ct.indexOf(type);\n};",
    "ctx": {
      "type": "method",
      "receiver": "req",
      "name": "is",
      "string": "req.is()"
    }
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "String"
        ],
        "description": ""
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Return the protocol string \"http\" or \"https\"<br />when requested with TLS. When the \"trust proxy\" <br />setting is enabled the \"X-Forwarded-Proto\" header<br />field will be trusted. If you're running behind<br />a reverse proxy that supplies https for you this<br />may be enabled.</p>",
      "summary": "<p>Return the protocol string \"http\" or \"https\"<br />when requested with TLS. When the \"trust proxy\" <br />setting is enabled the \"X-Forwarded-Proto\" header<br />field will be trusted. If you're running behind<br />a reverse proxy that supplies https for you this<br />may be enabled.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "req.__defineGetter__('protocol', function(){\n  var trustProxy = this.app.get('trust proxy');\n  return this.connection.encrypted\n    ? 'https'\n    : trustProxy\n      ? (this.get('X-Forwarded-Proto') || 'http')\n      : 'http';\n});"
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "Boolean"
        ],
        "description": ""
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Short-hand for:</p>\n\n<p>req.protocol == 'https'</p>",
      "summary": "<p>Short-hand for:</p>",
      "body": "<p>req.protocol == 'https'</p>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "req.__defineGetter__('secure', function(){\n  return 'https' == this.protocol;\n});"
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "String"
        ],
        "description": ""
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Return the remote address, or when<br />\"trust proxy\" is <code>true</code> return<br />the upstream addr.</p>",
      "summary": "<p>Return the remote address, or when<br />\"trust proxy\" is <code>true</code> return<br />the upstream addr.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "req.__defineGetter__('ip', function(){\n  return this.ips[0] || this.connection.remoteAddress;\n});"
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "Array"
        ],
        "description": ""
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>When \"trust proxy\" is <code>true</code>, parse<br />the \"X-Forwarded-For\" ip address list.</p>\n\n<p>For example if the value were \"client, proxy1, proxy2\"<br />you would receive the array <code>[\"client\", \"proxy1\", \"proxy2\"]</code><br />where \"proxy2\" is the furthest down-stream.</p>",
      "summary": "<p>When \"trust proxy\" is <code>true</code>, parse<br />the \"X-Forwarded-For\" ip address list.</p>",
      "body": "<p>For example if the value were \"client, proxy1, proxy2\"<br />you would receive the array <code>[\"client\", \"proxy1\", \"proxy2\"]</code><br />where \"proxy2\" is the furthest down-stream.</p>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "req.__defineGetter__('ips', function(){\n  var trustProxy = this.app.get('trust proxy');\n  var val = this.get('X-Forwarded-For');\n  return trustProxy && val\n    ? val.split(/ *, */)\n    : [];\n});"
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": ""
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Return basic auth credentials.</p>\n\n<h2>Examples</h2>\n\n<p>// <a href='http://tobi:<a href='mailto:hello@example.com'>hello@example.com</a>'>http://tobi:<a href='mailto:hello@example.com'>hello@example.com</a></a><br />   req.auth<br />   // => { username: 'tobi', password: 'hello' }</p>",
      "summary": "<p>Return basic auth credentials.</p>",
      "body": "<h2>Examples</h2>\n\n<p>// <a href='http://tobi:<a href='mailto:hello@example.com'>hello@example.com</a>'>http://tobi:<a href='mailto:hello@example.com'>hello@example.com</a></a><br />   req.auth<br />   // => { username: 'tobi', password: 'hello' }</p>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "req.__defineGetter__('auth', function(){\n  // missing\n  var auth = this.get('Authorization');\n  if (!auth) return {};\n\n  // malformed\n  auth = auth.split(' ')[1];\n  if (!auth) return {};\n\n  // credentials\n  auth = new Buffer(auth, 'base64').toString().split(':');\n  return { username: auth[0], password: auth[1] };\n});"
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "Array"
        ],
        "description": ""
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Return subdomains as an array.</p>\n\n<p>For example \"tobi.ferrets.example.com\"<br />would provide <code>[\"ferrets\", \"tobi\"]</code>.</p>",
      "summary": "<p>Return subdomains as an array.</p>",
      "body": "<p>For example \"tobi.ferrets.example.com\"<br />would provide <code>[\"ferrets\", \"tobi\"]</code>.</p>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "req.__defineGetter__('subdomains', function(){\n  return this.get('Host')\n    .split('.')\n    .slice(0, -2)\n    .reverse();\n});"
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "String"
        ],
        "description": ""
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Short-hand for <code>url.parse(req.url).pathname</code>.</p>",
      "summary": "<p>Short-hand for <code>url.parse(req.url).pathname</code>.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "req.__defineGetter__('path', function(){\n  return parse(this).pathname;\n});"
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "String"
        ],
        "description": ""
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Parse the \"Host\" header field hostname.</p>",
      "summary": "<p>Parse the \"Host\" header field hostname.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "req.__defineGetter__('host', function(){\n  return this.get('Host').split(':')[0];\n});"
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "Boolean"
        ],
        "description": ""
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Check if the request is fresh, aka<br />Last-Modified and/or the ETag<br />still match.</p>",
      "summary": "<p>Check if the request is fresh, aka<br />Last-Modified and/or the ETag<br />still match.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "req.__defineGetter__('fresh', function(){\n  var method = this.method;\n  var s = this.res.statusCode;\n\n  // GET or HEAD for weak freshness validation only\n  if ('GET' != method && 'HEAD' != method) return false;\n\n  // 2xx or 304 as per rfc2616 14.26\n  if ((s >= 200 && s < 300) || 304 == s) {\n    return fresh(this.headers, this.res._headers);\n  }\n\n  return false;\n});"
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "Boolean"
        ],
        "description": ""
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Check if the request is stale, aka<br />\"Last-Modified\" and / or the \"ETag\" for the<br />resource has changed.</p>",
      "summary": "<p>Check if the request is stale, aka<br />\"Last-Modified\" and / or the \"ETag\" for the<br />resource has changed.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "req.__defineGetter__('stale', function(){\n  return !this.fresh;\n});"
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "Boolean"
        ],
        "description": ""
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Check if the request was an <em>XMLHttpRequest</em>.</p>",
      "summary": "<p>Check if the request was an <em>XMLHttpRequest</em>.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "req.__defineGetter__('xhr', function(){\n  var val = this.get('X-Requested-With') || '';\n  return 'xmlhttprequest' == val.toLowerCase();\n});"
  }
]