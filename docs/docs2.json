[{"filePath":"/Users/shiawuen/projects/nox/lib/nox/cli.js","documentation":[{"description":"CLI - command line interface for nox","code":"var cli = exports;\n\n","tags":[{"tag":"namespace","type":"","name":"","description":"cli"}]},{"description":"","code":"var defaultOutputDir = 'doc';\n\n","tags":[{"tag":"constant","type":"","name":"","description":"default output directory for docs It is relative to the working directory"}]},{"description":"","code":"var defaultSourceDir = 'lib';\n\n\n","tags":[{"tag":"constant","type":"","name":"","description":"default source directory for finding files It is relative to the working directory"}]},{"description":"","code":"var optsFilePath = process.cwd() + '/.nox.opts';\n\n","tags":[{"tag":"constant","type":"","name":"","description":"default file name for .nox.opts"}]},{"description":"Runs the commands from the command line Starting point of the application","code":"cli.start = function(argv) {\n  mergedOptions(argv, function(opts) {\n    if (opts.h || opts.help) {\n      cli.help();\n    } else if (opts.v || opts.version) {\n      cli.version();\n    } else {\n      cli.generate(opts);\n    }\n  });\n};\n\n","tags":[{"tag":"example","description":"cli.start();\n// => returns nothing"},{"tag":"public","type":"","name":"","description":""},{"tag":"param","type":"Object","name":"argv","description":"The command line options"}]},{"description":"Shows the help message for Nox","code":"cli.help = function() {\n  winston.help('Usage: nox [OPTIONS] [FILES]');\n  winston.help('');\n  winston.help('where [OPTION] is one of:');\n  winston.help('');\n  winston.help('-o, --output-dir');\n  winston.help('Specify the directory where the documents will be saved at');\n  winston.help('');\n  winston.help('-h, --help');\n  winston.help('Shows the help message');\n  winston.help('');\n  winston.help('-v, --version');\n  winston.help('Shows the version of the package');\n};\n\n","tags":[{"tag":"example","description":"cli.help();\n// => returns nothing"},{"tag":"public","type":"","name":"","description":""}]},{"description":"Shows the version of the app","code":"cli.version = function() {\n  var packagePath = path.normalize(__dirname + '../../../package.json');\n  fs.readFile(packagePath, 'utf8', function(err, data) {\n    if (err) {\n      winston.error('[Nox] Error reading package.json');\n    } else {\n      winston.info(JSON.parse(data).version);\n    }\n  });\n};\n\n","tags":[{"tag":"example","description":"cli.version();\n// => returns nothing"},{"tag":"public","type":"","name":"","description":""}]},{"description":"Generates the documentation from the code","code":"cli.generate = function(opts) {\n  var cmdOptions = {};\n  cmdOptions.outputDir = getOutputDir(opts);\n  getFilesForParsing(opts, function(err, filePaths) {\n    if (err) {\n      winston.error('[Nox] Error reading the source files');\n    } else {\n      parser.parseFiles(filePaths, function(err, results) {\n\tif (err) {\n\t  console.log(err);\n\t} else {\n\t  saveResults( results, cmdOptions.outputDir, function (err) {\n\t    if (err) {\n              winston.error( err );\n            } else {\n              winston.info('Docs generated')\n            }\n\t  });\n\t}\n      });\n    }\n  });\n};\n\n","tags":[{"tag":"example","description":"cli.generate({});\n// => returns nothing"},{"tag":"public","type":"","name":"","description":""},{"tag":"param","type":"Object","name":"opts","description":"The options"}]},{"description":"Returns the output directory given the command line arguments","code":"function getOutputDir(opts) {\n  var outputDir = opts.o || opts['output-dir'] || defaultOutputDir;\n  return path.normalize(process.cwd() + '/' + outputDir);\n}\n\n","tags":[{"tag":"example","description":"getOutputDir({o: 'foo'})\n// => '/path/to/foo'"},{"tag":"private","type":"","name":"","description":""},{"tag":"param","type":"Object","name":"opts","description":"The options"},{"tag":"return","type":"String","name":"","description":"The output directory path"}]},{"description":"Returns a list of files to be parsed. Only accept js files for now.","code":"function getFilesForParsing(opts, callback) {\n  var sourceDirOpt = opts._[0] || defaultSourceDir;\n  var sourceDirs = _.map(sourceDirOpt.split(','), function(sourcePath) {\n    return path.normalize(process.cwd() + '/' + sourcePath);\n  });\n  var findSourceFiles = function(sourcePath, findCallback) {\n    if (/\\.js$/i.test(sourcePath)) {\n      return findCallback(null, sourcePath);\n    } else {\n      return utility.readdirRecursive(sourcePath, function(err, filePaths) {\n\tif (err) {\n\t  return findCallback(err, sourcePath);\n\t} else {\n\t  return findCallback(null, utility.filterJSFiles(filePaths));\n\t}\n      });\n    }\n  };\n\n  async.map(sourceDirs, findSourceFiles, function(err, results) {\n    if (err) {\n      return callback(err, null);\n    } else {\n      return callback(null, _.flatten(results));\n    }\n  });\n}\n\n","tags":[{"tag":"example","description":"getFilesForParsing({_: ['lib']}, function(err, filePaths) {\n  // filePaths => ['/path/to/lib/foo.js', '/path/to/lib/bar.js']\n});"},{"tag":"private","type":"","name":"","description":""},{"tag":"param","type":"Object","name":"opts","description":"The command line options"},{"tag":"callbackParam","type":"Object","name":"err","description":"The error object"},{"tag":"callbackParam","type":"Array","name":"filePaths","description":"The Array of file paths"}]},{"description":"Loads the options from the .nox.opts file","code":"function loadOptsFile(callback) {\n  return fs.exists(optsFilePath, function(exists) {\n    if (exists) {\n      return fs.readFile(optsFilePath, 'utf8', function(err, data) {\n\tif (err) {\n\t  winston.error('[Nox] Error reading nox option file');\n\t  return callback(err, {});\n\t} else {\n\t  try {\n\t    return callback(null, JSON.parse(data));\n\t  } catch (err) {\n\t    winston.error('[Nox] Error parsing nox option file');\n\t    return callback(err, {});\n\t  }\n\t}\n      });\n    } else {\n      return callback(null, {});\n    }\n  });\n}\n\n","tags":[{"tag":"example","description":"loadOptsFile(function(err, opts) {\n  // opts => { 'o': 'lib', 'help': true}\n});"},{"tag":"private","type":"","name":"","description":""},{"tag":"callbackParam","type":"Object","name":"err","description":"The error object"},{"tag":"callbackParam","type":"Object","name":"opts","description":"The parsed options from the file"}]},{"description":"Returns the merged options from the command line and option file. Command line will take precendence","code":"function mergedOptions(argv, callback) {\n  return loadOptsFile(function(err, opts) {\n    if (err) {\n      return callback(argv);\n    } else {\n      return callback(_.extend(opts, argv));\n    }\n  });\n}\n\n","tags":[{"tag":"example","description":"// assuming file opts => {a: 'aa', b: 'b'}\nmergedOptions({a: 'a'}, function(opts) {\n  // => {a: 'a', b: 'b'}\n})\n *"},{"tag":"private","type":"","name":"","description":""},{"tag":"param","type":"Object","name":"argv","description":"The command line arguments"},{"tag":"callbackParam","type":"Object","name":"opts","description":"The parsed options"}]},{"description":"Check if a directory exists, create one if not","code":"function mkdir (path, next) {\n  fs.exists( path, function (exists) {\n    exists\n        ? next()\n        : fs.mkdir( path, next );\n  });\n}\n\n","tags":[{"tag":"example","description":" mkdir( path, function (err) {\n   if ( ! err ) {\n      // Save file\n   }\n });"},{"tag":"private","type":"","name":"","description":""},{"tag":"param","type":"String","name":"","description":"path"},{"tag":"param","type":"Function","name":"","description":"next"},{"tag":"callbackParam","type":"","name":"{Error|Object} err","description":"The error details"}]},{"description":"Call to save parsed docs as \"docs.json\" in the directory given","code":"function saveResults (data, dir, next) {\n  mkdir( dir, function (err) {\n    if (err) {\n      return next( err );\n    }\n\n    fs.writeFile(\n      dir + '/docs.json',\n      JSON.stringify(data),\n      next);\n  });\n","tags":[{"tag":"example","description":" saveResults( docs, dir, function (err) {\n   if ( ! err ) {\n     // Saved\n   }\n });"},{"tag":"private","type":"","name":"","description":""},{"tag":"param","type":"Object","name":"","description":"data"},{"tag":"param","type":"String","name":"dir","description":"path to directory to save the data object as file"},{"tag":"param","type":"Function","name":"","description":"next"}]}]},{"filePath":"/Users/shiawuen/projects/nox/lib/nox/parser.js","documentation":[{"description":"Parser - Parses the source","code":"var parser = exports;\n\n","tags":[{"tag":"namespace","type":"","name":"","description":"parser"}]},{"description":"Parse the files and return the results in JSON","code":"parser.parseFiles = function(filePaths, callback) {\n  return async.map(filePaths, parseFile, callback);\n};\n\n","tags":[{"tag":"example","description":"parser.parseFiles(['/path/to/foo'], function(err, results) {\n  // results => [...]\n});"},{"tag":"public","type":"","name":"","description":""},{"tag":"param","type":"Array","name":"filePaths","description":"The Array of String file paths to the source files"},{"tag":"callbackParam","type":"Object","name":"err","description":"The error object"},{"tag":"callbackParam","type":"Object","name":"results","description":"The parsed results"}]},{"description":"Parsed the invidual file and return the results in JSON","code":"function parseFile(filePath, callback) {\n  fs.readFile(filePath, 'utf8', function(err, data) {\n    if (err) {\n      return callback(err, null);\n    } else {\n      var regionRegex = /\\/\\*\\*[\\n\\r]+/g;\n      var regions = data.split(regionRegex);\n      var parsedFileOutput = {};\n      parsedFileOutput.filePath = filePath;\n      parsedFileOutput.documentation = _.chain(regions)\n\t.map(parseCommentRegion)\n\t.compact()\n\t.value();\n      return callback(null, parsedFileOutput);\n    }\n  });\n};\n\n","tags":[{"tag":"example","description":"parseFile('/path/to/file', function(err, result) {\n  // result => [....]\n});"},{"tag":"private","type":"","name":"","description":""},{"tag":"param","type":"String","name":"filePath","description":"The String file paths to the source file"},{"tag":"callbackParam","type":"Object","name":"err","description":"The error object"},{"tag":"callbackParam","type":"Object","name":"result","description":"The parsed result  \\ [\\n\\r]+/g;"}]},{"description":"Parses the comment + code chunk and returns the result in JSON","code":"function parseCommentRegion(region) {\n  var parsedComment = extractCommentFromRegion(region);\n  var parsedCode = extractCodeFromRegion(region);\n\n  if (parsedComment === null || parsedCode === null) {\n    return '';\n  } else {\n    var parsedOutput = {};\n    var commentTagRegions = extractToTagRegions(parsedComment);\n    parsedOutput.description = sanitizeComment(commentTagRegions[0]);\n    parsedOutput.code = parsedCode;\n    parsedOutput.tags = _.chain(commentTagRegions)\n      .tail()\n      .map(parseCommentTag)\n      .compact()\n      .value();\n    return parsedOutput;\n  }\n}\n\n","tags":[{"tag":"example","description":"parseCommentRegion(\"some code + comment\");\n// => {...}"},{"tag":"private","type":"","name":"","description":""},{"tag":"param","type":"String","name":"region","description":"The code and comment chunk"},{"tag":"return","type":"Object","name":"","description":"The parsed result"}]},{"description":"Parses the comment tags and returns them in JSON","code":"function parseCommentTag(comment) {\n  if (isExampleTag(comment)) {\n    return extractExampleTagCode(comment);\n  } else {\n    var tagComponents = extractTagComponents(comment);\n    if (tagComponents === null) {\n      return '';\n    } else {\n      var parsedTags = {\n\ttag: formatTagComponent(tagComponents[1]),\n\ttype: sanitizeType(formatTagComponent(tagComponents[2])),\n\tname: formatTagComponent(tagComponents[3]),\n\tdescription: formatTagComponent(tagComponents[4])\n      };\n\n      // if there is no dash delimiter, the third matched group should\n      // be the description\n      if (parsedTags.name !== \"\" && parsedTags.description === \"\") {\n\tparsedTags.description = parsedTags.name;\n\tparsedTags.name = \"\";\n      }\n      return parsedTags;\n    }\n  }\n}\n\n","tags":[{"tag":"example","description":"parseCommentTag(\"comments with tags\");\n// => {...}"},{"tag":"private","type":"","name":"","description":""},{"tag":"param","type":"String","name":"comment","description":"The comment chunk"},{"tag":"return","type":"Object","name":"","description":"The parsed comment"}]},{"description":"Extracts the comment from a comment + code chunk","code":"function extractCommentFromRegion(comment) {\n  var commentRegex = /\\s*\\*[^\\n\\r]*\\s*[\\n\\r]+/gm;\n  var parsedCommentResult = comment.match(commentRegex);\n  if (parsedCommentResult !== null) {\n    return parsedCommentResult.join('');\n  } else {\n    return null;\n  }\n}\n\n","tags":[{"tag":"example","description":"extractCommentFromRegion(\"comment + code\");\n// => {...}"},{"tag":"private","type":"","name":"","description":""},{"tag":"param","type":"String","name":"comment","description":"The comment + code chunk"},{"tag":"return","type":"String","name":"","description":"The comment  \\ [^\\n\\r] \\s [\\n\\r]+/gm;"}]},{"description":"Extracts the code from a comment + code chunk","code":"function extractCodeFromRegion(comment) {\n  var codeRegex = /^(?!\\s*\\*).+\\s*[\\n\\r]+/gm;\n  var parsedCodeResult = comment.match(codeRegex);\n  if (parsedCodeResult !== null) {\n    return parsedCodeResult.join('');\n  } else {\n    return null;\n  }\n}\n\n","tags":[{"tag":"example","description":"extractCodeFromRegion(\"comment + code\");\n// => {...}"},{"tag":"private","type":"","name":"","description":""},{"tag":"param","type":"String","name":"comment","description":"The comment + code chunk"},{"tag":"return","type":"String","name":"","description":"The code  \\ ).+\\s [\\n\\r]+/gm;"}]},{"description":"Splits the comment by its tags","code":"function extractToTagRegions(comment) {\n  var commentTagRegex = /\\s*\\*\\s*@/gm;\n  return comment.split(commentTagRegex);\n}\n\n","tags":[{"tag":"example","description":"extractToTagRegions(\"comment\")\n// => [\"public\", \"...\"]"},{"tag":"private","type":"","name":"","description":""},{"tag":"param","type":"String","name":"comment","description":"The comment chunk"},{"tag":"return","type":"Array","name":"","description":"The Array of tags  \\ \\s"},{"tag":"gm","type":"","name":"","description":";"}]},{"description":"Removes the asterisks and new lines from the comment","code":"function sanitizeComment(comment) {\n  var commentWithoutNewline = comment.replace(/[\\r\\n]/gm, ' ');\n  var commentCharRegex = /\\s*\\*\\/?\\s*/g;\n  return commentWithoutNewline.replace(commentCharRegex, ' ').trim();\n}\n\n","tags":[{"tag":"example","description":"sanitizeComment(\"* foo\\n\");\n// => \"foo\""},{"tag":"private","type":"","name":"","description":""},{"tag":"param","type":"String","name":"comment","description":"The comment chunk"},{"tag":"return","type":"String","name":"","description":"The comment without the asterisks and new lines  \\ \\/?\\s g;"}]},{"description":"Trims whitespace from the tag. Returns an empty string for null cases.","code":"function formatTagComponent(tagComponent) {\n  return (tagComponent || '').trim();\n}\n\n","tags":[{"tag":"example","description":"formatTagComponent(\" foo \");\n// => \"foo\""},{"tag":"private","type":"","name":"","description":""},{"tag":"param","type":"String","name":"tagComponent","description":"A string"},{"tag":"return","type":"String","name":"","description":"String without whitespace"}]},{"description":"Breaks down a comment tag into its components","code":"function extractTagComponents(comment) {\n  var tagComponentRegex = /(\\w+)\\s*(\\{\\w+\\})?\\s?([^-]+)?\\s?-?\\s?(.*)?/;\n  return sanitizeComment(comment).match(tagComponentRegex);\n}\n\n","tags":[{"tag":"example","description":"extractTagComponents(\"param {String} foo - bar\")\n// => [\"param\", \"{String}\", ...]"},{"tag":"private","type":"","name":"","description":""},{"tag":"param","type":"String","name":"comment","description":"The comment tag"},{"tag":"return","type":"Array","name":"The match result  (\\{\\w+\\})?\\s?([^","description":"]+)?\\s?-?\\s?(. )?/;"}]},{"description":"Removes the asterisks from the example description","code":"function sanitizeExampleCode(comment) {\n  var commentCharRegex = /\\s*\\*\\s\\s\\s/g;\n  return comment.replace(commentCharRegex, '');\n}\n\n","tags":[{"tag":"example","description":"sanitizeExampleCode(\"foo\\n * bar\")\n// => \"foo bar\""},{"tag":"private","type":"","name":"","description":""},{"tag":"param","type":"String","name":"comment","description":"The description for the example tag"},{"tag":"return","type":"String","name":"","description":"The cleaned up example description  \\ \\s\\s\\s/g;"}]},{"description":"Parses the example tag","code":"function extractExampleTagCode(exampleTag) {\n  var splittedExampleTags = exampleTag\n\t.replace(/example\\n/, '')\n\t.split(\"\\n\");\n  var sanitizedExampleCode = _.map(splittedExampleTags, sanitizeExampleCode);\n  if (/\\*/.test(_.last(sanitizedExampleCode))) {\n    sanitizedExampleCode.pop();\n  }\n  return {tag: 'example', description: sanitizedExampleCode.join(\"\\n\")};\n}\n\n","tags":[{"tag":"example","description":"extractExampleTagCode(\"example tag\")\n// => {tag: 'example', description: 'foo'}"},{"tag":"private","type":"","name":"","description":""},{"tag":"param","type":"String","name":"exampleTag","description":"The example comment chunk"},{"tag":"return","type":"Object","name":"","description":"The parsed example tag  .test(_.last(sanitizedExampleCode))) {"}]},{"description":"Checks if the comment tag is an example tag","code":"function isExampleTag(comment) {\n  return /^example\\n/.test(comment);\n}\n\n","tags":[{"tag":"example","description":"isExampleTag(\"comment\")\n// => true"},{"tag":"private","type":"","name":"","description":""},{"tag":"param","type":"String","name":"comment","description":"The comment chunk"},{"tag":"return","type":"Boolean","name":"","description":""}]},{"description":"Removes the curly braces from the type tag","code":"function sanitizeType(rawType) {\n  return rawType.replace(/[\\{\\}]/g, '');\n}\n","tags":[{"tag":"example","description":"sanitizeType(\"{foo}\")\n// => \"foo\""},{"tag":"private","type":"","name":"","description":""},{"tag":"param","type":"String","name":"","description":"rawType"},{"tag":"return","type":"String","name":"","description":""}]}]},{"filePath":"/Users/shiawuen/projects/nox/lib/nox/utility.js","documentation":[{"description":"Utility - for functions that do not belong anywhere","code":"var utility = exports;\n\n","tags":[{"tag":"namespace","type":"","name":"","description":"utility"}]},{"description":"Reads a directory recursively and returns the files","code":"utility.readdirRecursive = function(dirPath, callback) {\n  function mapPath(filePath, mapCallback) {\n    return fs.stat(filePath, function(err, stats) {\n      if (err) {\n\treturn mapCallback(err, filePath);\n      } else {\n\tif (stats.isFile()) {\n\t  return mapCallback(null, filePath);\n\t} else if (stats.isDirectory()) {\n\t  return utility.readdirRecursive(filePath, mapCallback);\n\t} else {\n\t  return mapCallback(null, filePath);\n\t}\n      }\n    });\n  };\n\n  fs.readdir(dirPath, function(err, files) {\n    if (err) {\n      return callback(err, null);\n    } else {\n      var fullFilePaths = _.map(files, function(filePath) {\n\treturn dirPath + filePath;\n      });\n      return async.map(fullFilePaths, mapPath, function(err, mappedPaths) {\n\treturn callback(err, _.flatten(mappedPaths));\n      });\n    }\n  });\n};\n\n","tags":[{"tag":"example","description":"utility.readdirRecursive('lib', function(err, filePaths) {\n  // filePaths => ['/path/to/foo.text', /path/to/bar.js']\n});"},{"tag":"public","type":"","name":"","description":""},{"tag":"param","type":"String","name":"dirPath","description":"The String which is a full path to a directory."},{"tag":"callbackParam","type":"Object","name":"err","description":"The error object"},{"tag":"callbackParam","type":"Array","name":"filePaths","description":"The Array of file paths found from the directory"}]},{"description":"Filters the file paths, returning only .js files","code":"utility.filterJSFiles = function(filePaths) {\n  return _.select(filePaths, function(filePath) {\n    return /\\.js$/i.test(filePath);\n  });\n","tags":[{"tag":"example","description":"utility.filterJSFiles(['foo.rb', 'goo.js']);\n// => ['goo.js']"},{"tag":"public","type":"","name":"","description":""},{"tag":"param","type":"Array","name":"filePaths","description":"The Array of String file paths"},{"tag":"return","type":"Array","name":"","description":"The Array of JS file paths"}]}]}]