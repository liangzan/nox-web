[{"filePath":"/Users/zan/Projects/nox/lib/nox/utility.js","documentation":[{"description":"Utility - for functions that do not belong anywhere","code":"var utility = exports;\n\n","tags":[{"tag":"namespace","type":"","name":"","description":"utility"}]},{"description":"Reads a directory recursively and returns the files with multilines","code":"utility.readdirRecursive = function(dirPath, callback) {\n  function mapPath(filePath, mapCallback) {\n    return fs.stat(filePath, function(err, stats) {\n      if (err) {\n\treturn mapCallback(err, filePath);\n      } else {\n\tif (stats.isFile()) {\n\t  return mapCallback(null, filePath);\n\t} else if (stats.isDirectory()) {\n\t  return utility.readdirRecursive(filePath, mapCallback);\n\t} else {\n\t  return mapCallback(null, filePath);\n\t}\n      }\n    });\n  };\n\n  fs.readdir(dirPath, function(err, files) {\n    if (err) {\n      return callback(err, null);\n    } else {\n      var fullFilePaths = _.map(files, function(filePath) {\n\treturn dirPath + '/' + filePath;\n      });\n      return async.map(fullFilePaths, mapPath, function(err, mappedPaths) {\n\treturn callback(err, _.flatten(mappedPaths));\n      });\n    }\n  });\n};\n\n","tags":[{"tag":"example","description":"utility.readdirRecursive('lib', function(err, filePaths) {\n  // filePaths => ['/path/to/foo.text', /path/to/bar.js']\n});"},{"tag":"public","type":"","name":"","description":""},{"tag":"param","type":"String","name":"dirPath  The String which is a full path to a directory.","description":""},{"tag":"callbackParam","type":"Object","name":"err","description":"The error object"},{"tag":"callbackParam","type":"Array","name":"filePaths","description":"The Array of file paths found from the directory"}]},{"description":"Filters the file paths, returning only .js files","code":"utility.filterJSFiles = function(filePaths) {\n  return _.select(filePaths, function(filePath) {\n    return /\\.js$/i.test(filePath);\n  });\n};\n\n/*\n/** this should go in */\n\n// nor should i match this\n","tags":[{"tag":"example","description":"utility.filterJSFiles(['foo.rb', 'goo.js']);\n// => ['goo.js']"},{"tag":"public","type":"","name":"","description":""},{"tag":"param","type":"Array","name":"filePaths","description":"The Array of String file paths"},{"tag":"return","type":"Array","name":"The Array of JS file paths   i should not match this   this should go in","description":""}]}]},
 {"filePath":"/Users/zan/Projects/nox/lib/nox/utility.js","documentation":[{"description":"Utility - for functions that do not belong anywhere","code":"var utility = exports;\n\n","tags":[{"tag":"namespace","type":"","name":"","description":"utility"}]},{"description":"Reads a directory recursively and returns the files with multilines","code":"utility.readdirRecursive = function(dirPath, callback) {\n  function mapPath(filePath, mapCallback) {\n    return fs.stat(filePath, function(err, stats) {\n      if (err) {\n\treturn mapCallback(err, filePath);\n      } else {\n\tif (stats.isFile()) {\n\t  return mapCallback(null, filePath);\n\t} else if (stats.isDirectory()) {\n\t  return utility.readdirRecursive(filePath, mapCallback);\n\t} else {\n\t  return mapCallback(null, filePath);\n\t}\n      }\n    });\n  };\n\n  fs.readdir(dirPath, function(err, files) {\n    if (err) {\n      return callback(err, null);\n    } else {\n      var fullFilePaths = _.map(files, function(filePath) {\n\treturn dirPath + '/' + filePath;\n      });\n      return async.map(fullFilePaths, mapPath, function(err, mappedPaths) {\n\treturn callback(err, _.flatten(mappedPaths));\n      });\n    }\n  });\n};\n\n","tags":[{"tag":"example","description":"utility.readdirRecursive('lib', function(err, filePaths) {\n  // filePaths => ['/path/to/foo.text', /path/to/bar.js']\n});"},{"tag":"public","type":"","name":"","description":""},{"tag":"param","type":"String","name":"dirPath  The String which is a full path to a directory.","description":""},{"tag":"callbackParam","type":"Object","name":"err","description":"The error object"},{"tag":"callbackParam","type":"Array","name":"filePaths","description":"The Array of file paths found from the directory"}]},{"description":"Filters the file paths, returning only .js files","code":"utility.filterJSFiles = function(filePaths) {\n  return _.select(filePaths, function(filePath) {\n    return /\\.js$/i.test(filePath);\n  });\n};\n\n/*\n/** this should go in */\n\n// nor should i match this\n","tags":[{"tag":"example","description":"utility.filterJSFiles(['foo.rb', 'goo.js']);\n// => ['goo.js']"},{"tag":"public","type":"","name":"","description":""},{"tag":"param","type":"Array","name":"filePaths","description":"The Array of String file paths"},{"tag":"return","type":"Array","name":"The Array of JS file paths   i should not match this   this should go in","description":""}]}]},
 {"filePath":"/Users/zan/Projects/nox/lib/nox/utility.js","documentation":[{"description":"Utility - for functions that do not belong anywhere","code":"var utility = exports;\n\n","tags":[{"tag":"namespace","type":"","name":"","description":"utility"}]},{"description":"Reads a directory recursively and returns the files with multilines","code":"utility.readdirRecursive = function(dirPath, callback) {\n  function mapPath(filePath, mapCallback) {\n    return fs.stat(filePath, function(err, stats) {\n      if (err) {\n\treturn mapCallback(err, filePath);\n      } else {\n\tif (stats.isFile()) {\n\t  return mapCallback(null, filePath);\n\t} else if (stats.isDirectory()) {\n\t  return utility.readdirRecursive(filePath, mapCallback);\n\t} else {\n\t  return mapCallback(null, filePath);\n\t}\n      }\n    });\n  };\n\n  fs.readdir(dirPath, function(err, files) {\n    if (err) {\n      return callback(err, null);\n    } else {\n      var fullFilePaths = _.map(files, function(filePath) {\n\treturn dirPath + '/' + filePath;\n      });\n      return async.map(fullFilePaths, mapPath, function(err, mappedPaths) {\n\treturn callback(err, _.flatten(mappedPaths));\n      });\n    }\n  });\n};\n\n","tags":[{"tag":"example","description":"utility.readdirRecursive('lib', function(err, filePaths) {\n  // filePaths => ['/path/to/foo.text', /path/to/bar.js']\n});"},{"tag":"public","type":"","name":"","description":""},{"tag":"param","type":"String","name":"dirPath  The String which is a full path to a directory.","description":""},{"tag":"callbackParam","type":"Object","name":"err","description":"The error object"},{"tag":"callbackParam","type":"Array","name":"filePaths","description":"The Array of file paths found from the directory"}]},{"description":"Filters the file paths, returning only .js files","code":"utility.filterJSFiles = function(filePaths) {\n  return _.select(filePaths, function(filePath) {\n    return /\\.js$/i.test(filePath);\n  });\n};\n\n/*\n/** this should go in */\n\n// nor should i match this\n","tags":[{"tag":"example","description":"utility.filterJSFiles(['foo.rb', 'goo.js']);\n// => ['goo.js']"},{"tag":"public","type":"","name":"","description":""},{"tag":"param","type":"Array","name":"filePaths","description":"The Array of String file paths"},{"tag":"return","type":"Array","name":"The Array of JS file paths   i should not match this   this should go in","description":""}]}]}]